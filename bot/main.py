from dotenv import load_dotenv, find_dotenv
from os import getenv
import logging
from chatids import chatids_users
from aiogram import Bot, Dispatcher, executor, types
import text

# –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
load_dotenv(find_dotenv()) #–ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª .env
bot = Bot(getenv('TEST_TOKEN')) #–ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ /start - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message_handler(commands=['start'])
async def language_selection(message: types.Message):
    # –ï—Å–ª–∏ chat.id –Ω–µ—Ç –≤ —Å–µ—Ç–µ (chatids_users) —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç
    if not str(message.from_user.id) in chatids_users:
        chatids_users.add(message.from_user.id)
        # –ï—Å–ª–∏ chat.id –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ (chatids.txt) —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç
        try:
            if str(message.from_user.id) not in open('chatids.txt').read():
                chatids_file = open("chatids.txt", "a")
                chatids_file.write(str(message.from_user.id) + "\n")
                chatids_file.close()
        except FileNotFoundError as e:
            print(e) #---–ó–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥–∏–Ω–≥----
            # –°–æ–∑–¥–∞–Ω–∏–µ chatids.txt
            open("chatids.txt", "w").close()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton(text = "üá∫üá¶–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
    btn2 = types.KeyboardButton(text ="üá¨üáßEnglish")
    kb.add(btn1, btn2)
    await bot.send_chat_action(message.from_user.id, 'typing')
    await bot.send_message(message.from_user.id, text=text.language_selection, parse_mode="HTML")
    await bot.send_message(message.from_user.id, text=text.button_driver, parse_mode="HTML")
    await bot.send_message(message.from_user.id, text=text.eng_button_driver, parse_mode="HTML", reply_markup=kb)
    # await message.delete()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–æ—Ä—è —Å iD –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
user_languages = {}
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å (user_languages)
@dp.message_handler(lambda message: message.text in ['üá∫üá¶–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'üá¨üáßEnglish'])
async def language_preservation(message: types.Message):
    user_languages[message.from_user.id] = message.text



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)